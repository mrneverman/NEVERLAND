---
# tasks file for InstallK8s
# Based on the : https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
#                https://buildvirtual.net/deploy-a-kubernetes-cluster-using-ansible/
#                https://www.linuxsysadmins.com/install-kubernetes-cluster-with-ansible/
#                https://subok-tech.com/installing-kubernetes-using-ansible-on-ubuntu-20-04/
     - name: Create containerd config file
       ansible.builtin.file:
         path: "/etc/modules-load.d/containerd.conf"
         state: "touch"
         mode: 0755

     - name: Add conf for containerd
       ansible.builtin.blockinfile:
         path: "/etc/modules-load.d/containerd.conf"
         block: |
               overlay
               br_netfilter

     - name: modprobe
       ansible.builtin.modprobe:
         name: overlay
         state: present

     - name: modprobe
       ansible.builtin.modprobe:
         name: br_netfilter
         state: present

     - name: Set system configurations for Kubernetes networking
       ansible.builtin.file:
         path: "/etc/sysctl.d/99-kubernetes-cri.conf"
         state: "touch"
         mode: 0755

     - name: Add conf for containerd
       ansible.builtin.blockinfile:
         path: "/etc/sysctl.d/99-kubernetes-cri.conf"
         block: |
                net.bridge.bridge-nf-call-iptables = 1
                net.ipv4.ip_forward = 1
                net.bridge.bridge-nf-call-ip6tables = 1

     - name: Apply new settings
       ansible.builtin.command: sysctl --system

     - name: install containerd apt-transpors-https curl
       ansible.builtin.apt:
         name:
         - containerd
         - apt-transport-https
         - curl
         state: present
         update_cache: true
         # update_cache_retries: 5
         # update_cache_retry_max_delay: 20
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/

     - name: Create /etc/containerd
       ansible.builtin.file:
         path: /etc/containerd
         state: directory
         mode: 0755

     - name: Configure containerd.
       ansible.builtin.shell: /usr/bin/containerd config default > /etc/containerd/config.toml

     - name: Create service for containerd to use proxy - 1
       ansible.builtin.file:
         path: "/etc/systemd/system/containerd.service.d"
         state: "directory"
         mode: 0755

     - name: Create service for containerd to use proxy - 2
       ansible.builtin.file:
         path: "/etc/systemd/system/containerd.service.d/http_proxy.conf"
         state: "touch"
         mode: 0755

     - name: Configure containerd proxy service
       ansible.builtin.blockinfile:
         path: "/etc/systemd/system/containerd.service.d/http_proxy.conf"
         block: |
                [Service]
                Environment="HTTP_PROXY=http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/"
                Environment="HTTPS_PROXY=http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/"
                Environment="NO_PROXY={{ vpc_cidr }},{{ vpc_pod_cidr }},{{ vpc_svc_cidr }},.svc,local,localhost,istio-sidecar-injector.istio-system.svc"

     - name: enable and restart containerd
       ansible.builtin.service:
         name: containerd
         state: restarted
         enabled: true
         daemon-reload: true

     - name: Make the Swap inactive
       ansible.builtin.command: swapoff -a

     - name: Remove Swap entry from /etc/fstab.
       ansible.builtin.lineinfile:
         dest: /etc/fstab
         regexp: swap
         state: absent

     - name: Add the Google Cloud public signing key
       ansible.builtin.apt_key:
         url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
         state: present
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/

     - name: Create kubernetes repo file
       ansible.builtin.apt_repository:
         repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
         state: present
         filename: kubernetes
         mode: 0600
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/

     - name: install kubelet
       ansible.builtin.apt:
         name:
         - kubelet={{ K8s_version_ }}
         state: present
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
       when: install_kubelet

     - name: enable and restart kubelet
       ansible.builtin.service:
         name: kubelet
         state: restarted
         enabled: true
       when: install_kubelet

     - name: install kubeadm
       ansible.builtin.apt:
         name:
         - kubeadm={{ K8s_version_ }}
         state: present
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
       when: install_kubeadm

     - name: install kubectl
       ansible.builtin.apt:
         name:
         - kubectl={{ K8s_version_ }}
         state: present
       environment:
         http_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
         https_proxy: http://{{ ioi_internal_ip }}:{{ tinyproxy_port }}/
       when: install_kubectl

     - name: Intilizing Kubernetes Cluster
       ansible.builtin.shell: kubeadm init --pod-network-cidr "{{ vpc_pod_cidr }}" --service-cidr "{{ vpc_svc_cidr }}" --control-plane-endpoint "{{ LBIP }}" --upload-certs
       register: kubeadm_init_out
       when: inventory_hostname == groups['Nevertowns'][0] 

     - name: Print kubeadm_init_out
       ansible.builtin.debug:
         msg: "{{ kubeadm_init_out.stdout_lines }}"
       when: inventory_hostname == groups['Nevertowns'][0]

     - name: Copy join command for control plane nodes  to local file
       ansible.builtin.copy:
         content: "{{ kubeadm_init_out.stdout_lines[72:75] | join('') | replace('\t', '') | replace('\\-','-') | replace('  ','') }}"
         dest: "./ClusterInitFiles/kubernetes_controlplane_join_command"
         mode: 0600
       delegate_to: localhost
       when: inventory_hostname == groups['Nevertowns'][0]

     - name: Copy join command for worker nodes  to local file
       ansible.builtin.copy:
         content: "{{ kubeadm_init_out.stdout_lines[82:85] | join('') | replace('\t', '') | replace('\\-','-') | replace('  ','') }}"
         dest: "./ClusterInitFiles/kubernetes_worker_join_command"
         mode: 0600
       delegate_to: localhost
       when: inventory_hostname == groups['Nevertowns'][0]

     - name: /etc/kubernetes/admin.conf from remote to local.
       ansible.builtin.fetch:
         src: /etc/kubernetes/admin.conf
         dest: ./ClusterInitFiles/
         flat: true
       when: inventory_hostname == groups['Nevertowns'][0]

     - name: Copy worker join command from Ansiblehost to other nodes.
       ansible.builtin.copy:
         src: ./ClusterInitFiles/kubernetes_worker_join_command
         dest: /tmp/kubernetes_join_command
         mode: 0500
       when: inventory_hostname in groups['Worktowns']
         
     - name: Copy control plane join command from Ansiblehost to other nodes.
       ansible.builtin.copy:
         src: ./ClusterInitFiles/kubernetes_controlplane_join_command
         dest: /tmp/kubernetes_join_command
         mode: 0500
       when: inventory_hostname in groups['Nevertowns'][1:]
     
     - name: Join nodes to the cluster.
       ansible.builtin.command: sh /tmp/kubernetes_join_command
       register: joined_or_not
       when: inventory_hostname in groups['Worktowns'] or inventory_hostname in groups['Nevertowns'][1:]
       until: joined_or_not.stdout.find("This node has joined the cluster") != -1
       retries: 10
       delay: 3

     - name: Get Joiner or not
       ansible.builtin.debug:
         msg: "{{ joined_or_not }}"
       when: inventory_hostname in groups['Worktowns'] or inventory_hostname in groups['Nevertowns'][1:]

     - name: Delete join file
       ansible.builtin.file:
         path: /tmp/kubernetes_join_command
         state: absent
       when: inventory_hostname in groups['Worktowns'] or inventory_hostname in groups['Nevertowns'][1:]

     - name: Insert a line at the end of /var/lib/kubelet/config.yaml
       ansible.builtin.lineinfile:
         path: /var/lib/kubelet/config.yaml
         line: 'serverTLSBootstrap: true'

     - name: restart kubelet
       ansible.builtin.service:
         name: kubelet
         state: restarted
       when: install_kubelet
